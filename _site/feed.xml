<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog</title>
    <atom:link href="/feed.xml" rel="self" type="application/rss+xml"/>
    <link>http://localhost:4000/</link>
    <description>A website with blog posts and pages</description>
    <pubDate>Tue, 30 Jan 2018 20:29:47 -0500</pubDate>
    
      <item>
        <title>Challenge 2. Rotary Encoder:Gray Code</title>
        <link>/2018/01/20/Gray-Code-Challenge.html</link>
        <guid isPermaLink="true">/2018/01/20/Gray-Code-Challenge.html</guid>
        <description>&lt;h2 id=&quot;purpose&quot;&gt;Purpose&lt;/h2&gt;
&lt;p&gt;The purpose of this project is to take input from the rotary encoder and display its value on three 7-segment displays. The rotary encoder outputs its value in gray code, so it must be converted to a binary value. To display this binary value, it must be converted to a binary-coded-decimal (BCD). Transistors must be used to cycle through the 7-segment displays in order to give the appearance of every display being on at once.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Parts List&lt;/th&gt;
      &lt;th&gt; &lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;4-Bit Gray-Code Rotary Encoder&lt;/td&gt;
      &lt;td&gt;3× 7-Segment Display&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;CD4511BE BCD to 7-Segment Display IC&lt;/td&gt;
      &lt;td&gt;4× 1MΩ Resistor&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3× 3904 NPN Transistor&lt;/td&gt;
      &lt;td&gt;3× 1kΩ Resistor&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Arduino Uno&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;procedure&quot;&gt;Procedure&lt;/h2&gt;
&lt;p&gt;This challenge started by wiring the rotary encoder to an existing 7-segment BCD display circuit. The initial circuit consisted of a 4511 IC connected to three 7-segment displays. The displays achieved persistence of vision (POV) by toggling the ground connection through the use of NPN transistors. The wiring of the rotary encoder is nearly the same as that in Challenge 1 Rotary Switch Monitor.&lt;/p&gt;

&lt;p&gt;The real difference is in the output from the rotary encoder. Instead of returning a binary number according to the position of the rotor, the encoder used here returns a “Gray code” value. Gray code is very different from binary. Instead of being a “weighted” number system, wherein a change in a specific digit always has the same affect on a number, Gray code is unweighted. This makes it a code instead of a number system. The key feature of Gray code is that between each number only one bit changes value. When using binary, multiple bits often change from a 1 to a 0 while incrementing or decrementing number value. This reduces ambiguity between number states and, in extreme cases, can reduce wear on memory. At right is the bottom view of Gray code rotary encoder, with white squares being zeros and black squares representing ones.&lt;/p&gt;

&lt;p&gt;&lt;img style=&quot;float: right;&quot; src=&quot;https://emcauliffe.ca/Images/ER%20Reports/Grade%2012/Challenge%202.%20Rotary%20Encoder%20Gray%20code/rotaryEncoderGraphic.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The code does the brunt of the work in this challenge. The code consists of three main parts. First, the program takes input from the rotary encoder attached to &lt;code class=&quot;highlighter-rouge&quot;&gt;PORTD&lt;/code&gt; and converts the Gray code to a binary value. Next, the code converts this to a BCD value on &lt;code class=&quot;highlighter-rouge&quot;&gt;r17&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;r18&lt;/code&gt;. Finally the program displays these values on the 7-segment displays using POV. The code then loops to constantly poll the input states of the rotary encoder. 
In the first step of the input portion, the &lt;code class=&quot;highlighter-rouge&quot;&gt;collect&lt;/code&gt; function stores the input state of &lt;code class=&quot;highlighter-rouge&quot;&gt;PORTD&lt;/code&gt; to a register. It then shifts this register right, as the zero pin of &lt;code class=&quot;highlighter-rouge&quot;&gt;PORTD&lt;/code&gt; does not have input, and the first input is instead on pin one. To convert the Gray code to binary, the &lt;code class=&quot;highlighter-rouge&quot;&gt;convert&lt;/code&gt; function adds the binary value of the gray code input to the value of the x register and stores this in the z register. Next it queries the value stored at this position in memory. Here it returns a binary value equivalent to the Gray code. This is because the register stores the binary conversion of the Gray code at the index of the direct binary value of the gray code. For example, while Gray code &lt;code class=&quot;highlighter-rouge&quot;&gt;0b0011&lt;/code&gt; is a two, the direct binary value is three.&lt;/p&gt;

&lt;p&gt;Next, the program converts the binary value to a BCD. Beginning at the &lt;code class=&quot;highlighter-rouge&quot;&gt;loop&lt;/code&gt; label, the program shifts the input value left through the output registers, carrying the dropped value into each consecutive register. Here the &lt;code class=&quot;highlighter-rouge&quot;&gt;iterate&lt;/code&gt; register decrements, as the algorithm must know whether or not the input number is fully converted or not. Next the program checks if the low bit of the first register is greater than or equal to three. The value of this register increases by three if this condition is true. The &lt;code class=&quot;highlighter-rouge&quot;&gt;tens&lt;/code&gt; label repeats this step for the high bit of the first register. Instead, however, it checks if the register has a value greater than 80 (0x50) and adds 48 (0x30) if this condition is true. Again, this step repeats under the &lt;code class=&quot;highlighter-rouge&quot;&gt;hundreds&lt;/code&gt; label, checking the low bit of the second register and adding three accordingly. Here it jumps back to the &lt;code class=&quot;highlighter-rouge&quot;&gt;loop&lt;/code&gt; label. The input value is fully converted to BCD when the &lt;code class=&quot;highlighter-rouge&quot;&gt;iterate&lt;/code&gt; register reaches zero.&lt;/p&gt;

&lt;p&gt;In the final part, the &lt;code class=&quot;highlighter-rouge&quot;&gt;pov&lt;/code&gt; function takes the registers storing the BCD value and outputs the according number to the 4511 BCD to 7-segment display chip. The hundreds register displays first, with output on &lt;code class=&quot;highlighter-rouge&quot;&gt;PORTC&lt;/code&gt;. Next, the base pin of the according transistor activates by setting &lt;code class=&quot;highlighter-rouge&quot;&gt;PORTB&lt;/code&gt;. After displaying the hundreds digit, the tens digit is displayed by swapping the nibbles of the first register (&lt;code class=&quot;highlighter-rouge&quot;&gt;r17&lt;/code&gt;), and repeating the steps for the hundreds register. The transistor select register shifts by one to enable the tens display and disable the hundreds display. Next, &lt;code class=&quot;highlighter-rouge&quot;&gt;r17&lt;/code&gt; swaps nibbles again and the above steps repeat, but for the ones digit. In the final step, the program jumps to the beginning of the program and the process repeats.&lt;/p&gt;

&lt;h2 id=&quot;media&quot;&gt;Media&lt;/h2&gt;
&lt;table&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;img src=&quot;https://emcauliffe.ca/Images/ER%20Reports/Grade%2012/Challenge%202.%20Rotary%20Encoder%20Gray%20code/challenge2_bb.png&quot; /&gt;
    &lt;/td&gt;
    &lt;td&gt;
      &lt;img src=&quot;https://emcauliffe.ca/Images/ER%20Reports/Grade%2012/Challenge%202.%20Rotary%20Encoder%20Gray%20code/20180116_161909.jpg&quot; /&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;th&gt;Fritzing diagram&lt;/th&gt;
    &lt;th&gt;Circuit overview&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;img src=&quot;https://emcauliffe.ca/Images/ER%20Reports/Grade%2012/Challenge%202.%20Rotary%20Encoder%20Gray%20code/20180120_161226.jpg&quot; /&gt;
    &lt;/td&gt;
    &lt;td&gt;
      &lt;img src=&quot;https://emcauliffe.ca/Images/ER%20Reports/Grade%2012/Challenge%202.%20Rotary%20Encoder%20Gray%20code/20180120_161906.jpg&quot; /&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;th&gt;Proper operation showing output 14&lt;/th&gt;
    &lt;th&gt;Bottom of rotary encoder&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;th colspan=&quot;2&quot;&gt;Link to YouTube Video: &lt;a href=&quot;https://youtu.be/K7AFz38Lux8&quot;&gt;https://youtu.be/K7AFz38Lux8&lt;/a&gt;&lt;/th&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;h2 id=&quot;code&quot;&gt;Code&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;; GrayCodeChallenge.asm
;
; Created: 2018-01-15 8:57:57 AM
; Author : Ethan McAuliffe
.def	iterate = r24
.def	temp  = r25
.def	three = r23
.def	threeTens = r22

.cseg

.org 0x0000
   rjmp  reset
;segment table format: ;gfab_cde.

.org 0x0010
grayStart:
  .DB	0,1,3,2,7,6,4,5,15,14,12,13,8,9,11,10
grayEnd:

reset:
	ldi   r16, low(RAMEND)		;ALL assembly code should start by
	out   spl,r16				      ; setting the Stack Pointer to
	ldi   r16, high(RAMEND)		; the end of SRAM to support
	out   sph,r16				      ; function calls, etc.
	ldi   xl,low(grayStart&amp;lt;&amp;lt;1)	;position X and Y pointers to the
	ldi   xh,high(grayStart&amp;lt;&amp;lt;1)	;start and end addresses of
	ldi   yl,low(grayEnd&amp;lt;&amp;lt;1)   ; our data table, respectively
	ldi   yh,high(grayEnd&amp;lt;&amp;lt;1)
	movw  z,x	                 ;start Z pointer off at the start address of the table.

	ldi r16,0x1E
	out DDRD,r16			
	ldi r16,0x07
	out DDRB,r16			;pins to control transistors
	ldi r16,0x0F
	out DDRC,r16			;pins to control 7-segment driver    

collect:
	clr r16
	clr r17
	clr r18
	in r16,PIND			;store input from rotary encoder
	lsr r16			    ;shift right to get gray code
	movw z,r16			;move to element the gray code is in binary
	add zl,xl
	lpm r18,z			  ;store fetched binary value

convert:
	mov r16,r18
	ldi iterate, 8
	ldi three, 0x03
	ldi threeTens, 0x30
	clr r17
	clr r18

loop:
   rol r16
   rol r17
   rol r18				;shift value and BCD registers with carry
   dec iterate			
   breq pov				;jump to POV if there are no bits left to convert

   mov temp, r17					
   andi temp, 0x0F					
   cpi temp, 0x05			
   brlo tens        ;skip to tens if value is less than 5		
   add r17,three    ;otherwise add three
tens:
   cpi temp, 0x50			
   brlo hundreds
   add r17,threeTens
hundreds:
   andi temp, 0x0F
   cpi temp, 0x50			
   brlo loop
   add r18, three
rjmp loop

pov:
	out PORTC,r18			;output hundreds value
	ldi r16,0x04
	out PORTB,r16			;enable hundreds 7-seg disp
	rcall delay
	lsr r16

	swap r17
	out PORTC,r17			;output tens value
	out PORTB,r16			;enable tens 7-seg disp
	rcall delay
	lsr r16

	swap r17
	out PORTC,r17			;output ones value
	out PORTB,r16			;enable ones 7-seg disp
	rcall delay
rjmp collect

delay:
; Generated by delay loop calculator
; at http://www.bretmulvey.com/avrdelay.html
;
; Delay 16 000 cycles
; 1ms at 16 MHz

    ldi  r19, 21
    ldi  r20, 199
L1: dec  r20
    brne L1
    dec  r19
    brne L1
ret
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;To conclude, I am satisfied with the final result of this project. Unfortunately, I was not able to have operational code by the end of the challenge period. After working on my program throughout the week, however, I was able to get a working solution. My initial code was organized properly, but not operational. This challenge has adequately tested my knowledge of assembly code. It has also helped me develop my understanding of Gray code and a broader understanding on conversion algorithms/techniques.&lt;/p&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;
&lt;p&gt;D’Arcy, Chris. “TEI4M Challenges.” ACES, RSGC, 15 Jan. 2018, &lt;a href=&quot;http://darcy.rsgc.on.ca/ACES/TEI4M/1718/Challenges.html#2&quot;&gt;darcy.rsgc.on.ca/ACES/TEI4M/1718/Challenges.html#2&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Grayhill. “Series 25L.” Grayhill.com, Digi-Key, &lt;a href=&quot;http://www.grayhill.com/assets/1/7/Mech_Encoder_25L.pdf&quot;&gt;www.grayhill.com/assets/1/7/Mech_Encoder_25L.pdf&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Sat, 20 Jan 2018 00:00:00 -0500</pubDate>
      </item>
    
      <item>
        <title>Challenge 2. Rotary Switch Monitor</title>
        <link>/2017/12/02/Rotary-switch-monitor.html</link>
        <guid isPermaLink="true">/2017/12/02/Rotary-switch-monitor.html</guid>
        <description>&lt;h2 id=&quot;purpose&quot;&gt;Purpose&lt;/h2&gt;
&lt;p&gt;The purpose of this challenge is to create a circuit to light up a bicolour LED a specific colour depending on the position of a rotary decoder. The project works by reading the value of a  rotary encoder connected to an ATtiny85, then determining if said number has an odd or even number of set bits and displaying the appropriate colour on the LED. If the number of set bits is even, the LED will show red. Otherwise, it will be green. A resistor network provides appropriate pull down resistors for the input from the rotary encoder. The led should change colour immediately depending on the value of the rotary encoder.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Parts List&lt;/th&gt;
      &lt;th&gt; &lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;ATtiny85&lt;/td&gt;
      &lt;td&gt;Red-Green BiColour LED&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;10 Position BCD Rotary DIP Switch&lt;/td&gt;
      &lt;td&gt;10k Ω Resistor Network (6-Pin Bussed)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Atmel ICE AVR Debugger&lt;/td&gt;
      &lt;td&gt;ATtiny85 ISP Breakout&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;procedure&quot;&gt;Procedure&lt;/h2&gt;
&lt;p&gt;&lt;img style=&quot;float: right&quot; src=&quot;https://emcauliffe.ca/Images/ER%20Reports/Grade%2012/Challenge%201%20Rotary%20Switch%20Monitor/chrome_2017-12-02_14-22-14.png&quot; /&gt;
This challenge started with reading the datasheet for the rotary encoder and wiring the circuit accordingly. Positive voltage connected to the common pin and the binary outputs connected to the resistor network. The resistor network provides a pull down resistance for the outputs of the rotary encoder. These outputs also connected to the input pins of the ATtiny85. Pin 1 connected to &lt;code class=&quot;highlighter-rouge&quot;&gt;PORTB0&lt;/code&gt;, 2 to &lt;code class=&quot;highlighter-rouge&quot;&gt;PORTB1&lt;/code&gt; and 4 to &lt;code class=&quot;highlighter-rouge&quot;&gt;PORTB2&lt;/code&gt;. This meant that the first 3 bits of &lt;code class=&quot;highlighter-rouge&quot;&gt;PORTB&lt;/code&gt; represented the same value as shown on the rotary encoder. At right is the pinout of said rotary encoder. A bicolour LED is also connected to the ATtiny85 on pins &lt;code class=&quot;highlighter-rouge&quot;&gt;PORTB3&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;PORTB4&lt;/code&gt;, where the longer lead is in &lt;code class=&quot;highlighter-rouge&quot;&gt;PORTB3&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The next step was programming the ATtiny85 to read the binary value presented on its pins, determine the number of set bits, and display the appropriate LED colour. The program first enables output on &lt;code class=&quot;highlighter-rouge&quot;&gt;PORTB&lt;/code&gt; pins 2 and 3 in the &lt;code class=&quot;highlighter-rouge&quot;&gt;start&lt;/code&gt; label. Next, the microcontroller imports the high/low values on &lt;code class=&quot;highlighter-rouge&quot;&gt;PORTB&lt;/code&gt; to a register using the &lt;code class=&quot;highlighter-rouge&quot;&gt;in&lt;/code&gt; instruction. An &lt;code class=&quot;highlighter-rouge&quot;&gt;andi&lt;/code&gt; instruction strips the highest 4 bits from this value and each bit is then tested to be either a one or a zero. If the bit is a one, the value on a separate register increases by one. If bit zero of this external register is a zero, the number of set bits is even, and the program jumps to the &lt;code class=&quot;highlighter-rouge&quot;&gt;isEven&lt;/code&gt; label. This label calls the &lt;code class=&quot;highlighter-rouge&quot;&gt;green&lt;/code&gt; function, and then returns to the &lt;code class=&quot;highlighter-rouge&quot;&gt;load&lt;/code&gt; label to ensure constant monitoring of the rotary encoder value. If said value is odd, the same occurs but with the &lt;code class=&quot;highlighter-rouge&quot;&gt;isOdd&lt;/code&gt; label and &lt;code class=&quot;highlighter-rouge&quot;&gt;red&lt;/code&gt; function.&lt;/p&gt;

&lt;h2 id=&quot;media&quot;&gt;Media&lt;/h2&gt;
&lt;table&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;img src=&quot;https://emcauliffe.ca/Images/ER%20Reports/Grade%2012/Challenge%201%20Rotary%20Switch%20Monitor/challenge1.jpg&quot; /&gt;
    &lt;/td&gt;
    &lt;td&gt;
      &lt;img src=&quot;https://emcauliffe.ca/Images/ER%20Reports/Grade%2012/Challenge%201%20Rotary%20Switch%20Monitor/20171201_150546.jpg&quot; /&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;th&gt;3D Render of circuit&lt;/th&gt;
    &lt;th&gt;Photo of circuit&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;img src=&quot;https://emcauliffe.ca/Images/ER%20Reports/Grade%2012/Challenge%201%20Rotary%20Switch%20Monitor/RotarySwitch10.JPG&quot; /&gt;
    &lt;/td&gt;
    &lt;td&gt;
      &lt;img src=&quot;https://emcauliffe.ca/Images/ER%20Reports/Grade%2012/Challenge%201%20Rotary%20Switch%20Monitor/fritzing_bb.png&quot; /&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;th&gt;Rotary encoder used in circuit&lt;/th&gt;
    &lt;th&gt;Fritzing Diagram&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;th colspan=&quot;2&quot;&gt;Link to YouTube Video: &lt;a href=&quot;https://youtu.be/-HsjXjVvNDY&quot;&gt;https://youtu.be/-HsjXjVvNDY&lt;/a&gt;&lt;/th&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;h2 id=&quot;code&quot;&gt;Code&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;; Challenge 1.asm
; Created: 2017-12-01 1:58:44 PM
; Author : Ethan McAuliffe

#define TEST_BIT 0b00001111
; Replace with your application code
start:
	ldi r16,0x18
	out 0x17,r16
	clr r16

load:
	clr r16
	in r16,0x16

again:
	andi r16,0x0F
	mov r18,r16		;copy
	ldi r17,11		;mask
	and r18,r17		;test
	sbrc r18,0
	inc r19
	asr r16
	brne again
sbrc r19, 0
rjmp isOdd
rjmp isEven

isOdd:
	rcall red
	rjmp load

isEven:
	rcall green
	rjmp load

green:
	ldi r16,0x10
	out 0x18,r16
	ret

red:
	ldi r16,0x08
	out 0x18,r16
	ret
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;To conclude, I am somewhat disappointed with the result of this project. While I was able to complete the code for the project in the allotted time, I did not get as many photos as I should and was not able to record any video of its operation. While my 3D render animation is effective at displaying what a similar circuit would look like, I would rather have video that I could use to explain the fundamental workings of my project. Furthermore, my code has switched up the colour of the LED to be displayed; when the number of set bits are even, my code sets the LED green LED instead of red. I did, however, find the challenge to be quite enjoyable. I liked being pushed to delve deep into the ATtiny85 datasheet and AVR instruction set. I do believe that I learned a lot from the completion of this challenge.&lt;/p&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;
&lt;p&gt;Atmel Corporation. Atmel ATtiny25, ATtiny45, ATtiny85 Datasheet. Aug. 2013, &lt;a href=&quot;http://www.atmel.com/images/atmel-2586-avr-8-bit-microcontroller-attiny25-attiny45-attiny85_datasheet.pdf&quot;&gt;www.atmel.com/images/atmel-2586-avr-8-bit-microcontroller-attiny25-attiny45-attiny85_datasheet.pdf&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Wurth Electronics Inc. “428527420910 Drawing.” Digi-Key, 25 July 2014, &lt;a href=&quot;http://katalog.we-online.de/em/datasheet/428527420910.pdf&quot;&gt;katalog.we-online.de/em/datasheet/428527420910.pdf&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Sat, 02 Dec 2017 00:00:00 -0500</pubDate>
      </item>
    
      <item>
        <title>Short ISP:Relay Logic Adder</title>
        <link>/2017/11/05/Short-ISP.html</link>
        <guid isPermaLink="true">/2017/11/05/Short-ISP.html</guid>
        <description>&lt;h2 id=&quot;purpose&quot;&gt;Purpose&lt;/h2&gt;
&lt;p&gt;The purpose of this project is to gain a better understanding of how relays work and how early computer logic was able to use relays before the invention of transistors. The end product also aims to be simple and easy to operate for potential students and their parents touring the Design Engineering Studio (DES). Finally, the end product aims to sound pleasing to the ear by performing a series of satisfying mechanical clicks when operated.&lt;/p&gt;

&lt;p&gt;The adder is to combine the sum of nine inputs, each of which being a power of two, into a binary output. The maximum sum value is 31. The calculator is capable of producing a possible 32 (2&lt;sup&gt;5&lt;/sup&gt;) unique sums (where zero is an acceptable sum). Each switch will add either a 2, 4, 6 or 8 to the total.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Parts List&lt;/th&gt;
      &lt;th&gt; &lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;4× Full Adder Custom PCB&lt;/td&gt;
      &lt;td&gt;5× DC Power Jack&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;9× SPDT Toggle Switch&lt;/td&gt;
      &lt;td&gt;4× DC Barrel Plug&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;20W (5V@4A) Power Supply&lt;/td&gt;
      &lt;td&gt;5× 10mm Red LED&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;80× DPDT 5V 2A DC Relay&lt;/td&gt;
      &lt;td&gt;Grey PLA 3D Printer Filament&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;6.5” of 1”×1” Square Acrylic tubing&lt;/td&gt;
      &lt;td&gt;Clear Acrylic Sheet&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;24× Male/Female Pin Headers&lt;/td&gt;
      &lt;td&gt;Plywood Board&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;procedure&quot;&gt;Procedure&lt;/h2&gt;
&lt;p&gt;This project started with choosing relays to be a component in the project through a class Yankee Swap. The planning and idea brainstorming came after choosing relays to be a main component. After researching historic use of relays as logic capable devices, the chosen project would be a modular full adder circuit.&lt;/p&gt;

&lt;p&gt;Testing and research on creating logic gates with relays, specifically the NAND logic gate, proceeded the planned idea. NAND gates are important for logic operations as they can create any of the other logic gates when organized in specific ways. This testing and planning is similar to Project 2. Digital (Transistor-Based) Logic Gates, but with relays instead of transistors.&lt;/p&gt;

&lt;p&gt;&lt;img style=&quot;float:right&quot; src=&quot;https://emcauliffe.ca/Images/ER%20Reports/Grade%2012/Short%20ISP/Screen%20Shot%202017-11-05%20at%2017.05.12.png&quot; /&gt;
The next step was creating a half adder with NAND logic using relays. The half adder is a circuit which takes two separate inputs and returns a sum, in binary, of those outputs on two pins, the SUM (Σ) and CARRY OUT pins. For example, if both outputs are high, the sum is a decimal two, represented by a low output on the Σ pin (as there are zero groups of 20) and a high output on the CARRY OUT pin (as there is one group of 21). After testing this circuit and reproducing it in EAGLE, the circuit needed further modifications to transform it into a full adder. Accomplishing this consists of chaining two half adder circuits together and performing a logical OR on the two CARRY OUT pins. The chaining of half adders works by connecting the Σ pin of the first half adder to an input on the second and adding a CARRY IN pin which connects to the second input of the second half adder. Now that a CARRY IN pin is present, the circuit is an operational full adder and it is possible to chain it with other identical full adders to work as a calculator (that only does addition).  &lt;/p&gt;

&lt;p&gt;The design and fabrication of a custom PCB followed the creation of a full adder circuit diagram in EAGLE (PCB shown right, link to schematic image: &lt;a href=&quot;https://goo.gl/cXBRqa&quot;&gt;https://goo.gl/cXBRqa&lt;/a&gt;). The next step, after the arrival of the PCBs, was soldering the components to the board and testing operation. This includes soldering yellow relays in such a way that the four boards together spell out the word “ACES”.&lt;/p&gt;

&lt;p&gt;&lt;img style=&quot;float:right&quot; src=&quot;https://emcauliffe.ca/Images/ER%20Reports/Grade%2012/Short%20ISP/LED_Display.jpg&quot; /&gt;
The next step was designing the LED holder (present below at right) and the clips used to mount the PCBs. Using Fusion 360 for design and the Ultimaker 3 for fabrication made this easy and efficient. This step included multiple iterations of the PCB clip design. The final product has an aesthetically pleasing symmetry, is easy to use and is strong.&lt;/p&gt;

&lt;p&gt;&lt;img style=&quot;float:right&quot; src=&quot;https://emcauliffe.ca/Images/ER%20Reports/Grade%2012/Short%20ISP/RelayInternals.jpg&quot; /&gt;
The next step is attaching the parts to the plywood board with the intention of making the final project both visually appealing and easy to use. This step consists of gluing the PCBs down using the custom designed clips and drilling holes through to the other side of the board to hide wires. It also includes soldering switches to power rails, chaining the CARRY OUT and CARRY IN pins of consecutive boards together, connecting the LEDs to the outputs of the full adder PCBs and labeling specific components for ease of use. The final step is connecting the full adder PCBs to the respective switch inputs. The project is now complete.&lt;/p&gt;

&lt;h2 id=&quot;media&quot;&gt;Media&lt;/h2&gt;
&lt;table&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;img src=&quot;https://emcauliffe.ca/Images/ER%20Reports/Grade%2012/Challenge%201%20Rotary%20Switch%20Monitor/challenge1.jpg&quot; /&gt;
    &lt;/td&gt;
    &lt;td&gt;
      &lt;img src=&quot;https://emcauliffe.ca/Images/ER%20Reports/Grade%2012/Short%20ISP/20171026_234541.jpg&quot; /&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;th&gt;Circuit board render with clips&lt;/th&gt;
    &lt;th&gt;Yellow relays soldered on boards A &amp;amp; C&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;img src=&quot;https://emcauliffe.ca/Images/ER%20Reports/Grade%2012/Short%20ISP/DSC_0019.JPG&quot; /&gt;
    &lt;/td&gt;
    &lt;td&gt;
      &lt;img src=&quot;https://emcauliffe.ca/Images/ER%20Reports/Grade%2012/Short%20ISP/DSC_0021.JPG&quot; /&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;th&gt;Final Product&lt;/th&gt;
    &lt;th&gt;Output showing value of &quot;11&quot;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;th colspan=&quot;2&quot;&gt;Link to YouTube Video: &lt;a href=&quot;https://youtu.be/ibXhrRucC1A&quot;&gt;https://youtu.be/ibXhrRucC1A&lt;/a&gt;&lt;/th&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;In conclusion, I am happy with the result of this project. I enjoyed working with relays, despite them not being my initial choice in the Yankee Swap. This project had the unique benefit of being a mini history lesson too. I learned, through research online, how relays used to be found in nearly all electronics prior to the widespread use of vacuum tubes and transistors. Through this project I also learned why relays are never used in logic applications anymore: they use a lot of power, are very expensive and are at risk of mechanical failure. I am also happy with the appearance of my final project and am happy that it is going to be displayed in the lab for potential and younger students to get excited about electronics. While there are many skills that this project did not require (coding being the most significant), I still believe that this project was a resounding success.&lt;/p&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;
&lt;p&gt;Lekule, Sostenes. “A Full-Adder.” LEKULE BLOG, 21 Apr. 2015, &lt;a href=&quot;http://sosteneslekule.blogspot.ca/2015/04/a-full-adder.html&quot;&gt;http://sosteneslekule.blogspot.ca/2015/04/a-full-adder.html&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;“Relay Logic Gates.” Electro-Tech-Online.com, &lt;a href=&quot;http://www.electro-tech-online.com/attachments/upload_2015-6-18_21-28-8-png.92993/&quot;&gt;http://www.electro-tech-online.com/attachments/upload_2015-6-18_21-28-8-png.92993/&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Sun, 05 Nov 2017 00:00:00 -0400</pubDate>
      </item>
    
  </channel>
</rss>
