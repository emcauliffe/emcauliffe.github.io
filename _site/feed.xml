<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog</title>
    <atom:link href="/feed.xml" rel="self" type="application/rss+xml"/>
    <link>http://localhost:4000/</link>
    <description>A website with blog posts and pages</description>
    <pubDate>Tue, 30 Jan 2018 19:12:17 -0500</pubDate>
    
      <item>
        <title>DIY test post</title>
        <link>/2018/01/30/testPost.html</link>
        <guid isPermaLink="true">/2018/01/30/testPost.html</guid>
        <description>&lt;p&gt;This is a test post. I am testing the formatting and visuals of the post format.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;list&lt;/li&gt;
  &lt;li&gt;a&lt;/li&gt;
  &lt;li&gt;few&lt;/li&gt;
  &lt;li&gt;things&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://emcauliffe.ca/img/profile.jpg&quot; alt=&quot;Geometric pattern with fading gradient&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 30 Jan 2018 00:00:00 -0500</pubDate>
      </item>
    
      <item>
        <title>Challenge 2. Rotary Encoder:Gray Code</title>
        <link>/2018/01/15/Gray-Code-Challenge.html</link>
        <guid isPermaLink="true">/2018/01/15/Gray-Code-Challenge.html</guid>
        <description>&lt;h2 id=&quot;purpose&quot;&gt;Purpose&lt;/h2&gt;
&lt;p&gt;The purpose of this project is to take input from the rotary encoder and display its value on three 7-segment displays. The rotary encoder outputs its value in gray code, so it must be converted to a binary value. To display this binary value, it must be converted to a binary-coded-decimal (BCD). Transistors must be used to cycle through the 7-segment displays in order to give the appearance of every display being on at once.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Parts List&lt;/th&gt;
      &lt;th&gt; &lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;4-Bit Gray-Code Rotary Encoder&lt;/td&gt;
      &lt;td&gt;3× 7-Segment Display&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;CD4511BE BCD to 7-Segment Display IC&lt;/td&gt;
      &lt;td&gt;4× 1MΩ Resistor&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3× 3904 NPN Transistor&lt;/td&gt;
      &lt;td&gt;3× 1kΩ Resistor&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Arduino Uno&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;procedure&quot;&gt;Procedure&lt;/h2&gt;
&lt;p&gt;This challenge started by wiring the rotary encoder to an existing 7-segment BCD display circuit. The initial circuit consisted of a 4511 IC connected to three 7-segment displays. The displays achieved persistence of vision (POV) by toggling the ground connection through the use of NPN transistors. The wiring of the rotary encoder is nearly the same as that in Challenge 1 Rotary Switch Monitor.&lt;/p&gt;

&lt;p&gt;The real difference is in the output from the rotary encoder. Instead of returning a binary number according to the position of the rotor, the encoder used here returns a “Gray code” value. Gray code is very different from binary. Instead of being a “weighted” number system, wherein a change in a specific digit always has the same affect on a number, Gray code is unweighted. This makes it a code instead of a number system. The key feature of Gray code is that between each number only one bit changes value. When using binary, multiple bits often change from a 1 to a 0 while incrementing or decrementing number value. This reduces ambiguity between number states and, in extreme cases, can reduce wear on memory. At right is the bottom view of Gray code rotary encoder, with white squares being zeros and black squares representing ones.&lt;/p&gt;

&lt;p&gt;&lt;img style=&quot;float: right;&quot; src=&quot;https://emcauliffe.ca/Images/ER%20Reports/Grade%2012/Challenge%202.%20Rotary%20Encoder%20Gray%20code/rotaryEncoderGraphic.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The code does the brunt of the work in this challenge. The code consists of three main parts. First, the program takes input from the rotary encoder attached to &lt;code class=&quot;highlighter-rouge&quot;&gt;PORTD&lt;/code&gt; and converts the Gray code to a binary value. Next, the code converts this to a BCD value on &lt;code class=&quot;highlighter-rouge&quot;&gt;r17&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;r18&lt;/code&gt;. Finally the program displays these values on the 7-segment displays using POV. The code then loops to constantly poll the input states of the rotary encoder. 
In the first step of the input portion, the &lt;code class=&quot;highlighter-rouge&quot;&gt;collect&lt;/code&gt; function stores the input state of &lt;code class=&quot;highlighter-rouge&quot;&gt;PORTD&lt;/code&gt; to a register. It then shifts this register right, as the zero pin of &lt;code class=&quot;highlighter-rouge&quot;&gt;PORTD&lt;/code&gt; does not have input, and the first input is instead on pin one. To convert the Gray code to binary, the &lt;code class=&quot;highlighter-rouge&quot;&gt;convert&lt;/code&gt; function adds the binary value of the gray code input to the value of the x register and stores this in the z register. Next it queries the value stored at this position in memory. Here it returns a binary value equivalent to the Gray code. This is because the register stores the binary conversion of the Gray code at the index of the direct binary value of the gray code. For example, while Gray code &lt;code class=&quot;highlighter-rouge&quot;&gt;0b0011&lt;/code&gt; is a two, the direct binary value is three.&lt;/p&gt;

&lt;p&gt;Next, the program converts the binary value to a BCD. Beginning at the &lt;code class=&quot;highlighter-rouge&quot;&gt;loop&lt;/code&gt; label, the program shifts the input value left through the output registers, carrying the dropped value into each consecutive register. Here the &lt;code class=&quot;highlighter-rouge&quot;&gt;iterate&lt;/code&gt; register decrements, as the algorithm must know whether or not the input number is fully converted or not. Next the program checks if the low bit of the first register is greater than or equal to three. The value of this register increases by three if this condition is true. The &lt;code class=&quot;highlighter-rouge&quot;&gt;tens&lt;/code&gt; label repeats this step for the high bit of the first register. Instead, however, it checks if the register has a value greater than 80 (0x50) and adds 48 (0x30) if this condition is true. Again, this step repeats under the &lt;code class=&quot;highlighter-rouge&quot;&gt;hundreds&lt;/code&gt; label, checking the low bit of the second register and adding three accordingly. Here it jumps back to the &lt;code class=&quot;highlighter-rouge&quot;&gt;loop&lt;/code&gt; label. The input value is fully converted to BCD when the &lt;code class=&quot;highlighter-rouge&quot;&gt;iterate&lt;/code&gt; register reaches zero.&lt;/p&gt;

&lt;p&gt;In the final part, the &lt;code class=&quot;highlighter-rouge&quot;&gt;pov&lt;/code&gt; function takes the registers storing the BCD value and outputs the according number to the 4511 BCD to 7-segment display chip. The hundreds register displays first, with output on &lt;code class=&quot;highlighter-rouge&quot;&gt;PORTC&lt;/code&gt;. Next, the base pin of the according transistor activates by setting &lt;code class=&quot;highlighter-rouge&quot;&gt;PORTB&lt;/code&gt;. After displaying the hundreds digit, the tens digit is displayed by swapping the nibbles of the first register (&lt;code class=&quot;highlighter-rouge&quot;&gt;r17&lt;/code&gt;), and repeating the steps for the hundreds register. The transistor select register shifts by one to enable the tens display and disable the hundreds display. Next, &lt;code class=&quot;highlighter-rouge&quot;&gt;r17&lt;/code&gt; swaps nibbles again and the above steps repeat, but for the ones digit. In the final step, the program jumps to the beginning of the program and the process repeats.&lt;/p&gt;

&lt;table&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;img src=&quot;https://emcauliffe.ca/Images/ER%20Reports/Grade%2012/Challenge%202.%20Rotary%20Encoder%20Gray%20code/challenge2_bb.png&quot; /&gt;
    &lt;/td&gt;
    &lt;td&gt;
      &lt;img src=&quot;https://emcauliffe.ca/Images/ER%20Reports/Grade%2012/Challenge%202.%20Rotary%20Encoder%20Gray%20code/20180116_161909.jpg&quot; /&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;th&gt;Fritzing diagram&lt;/th&gt;
    &lt;th&gt;Circuit overview&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
      &lt;img src=&quot;https://emcauliffe.ca/Images/ER%20Reports/Grade%2012/Challenge%202.%20Rotary%20Encoder%20Gray%20code/20180120_161226.jpg&quot; /&gt;
    &lt;/td&gt;
    &lt;td&gt;
      &lt;img src=&quot;https://emcauliffe.ca/Images/ER%20Reports/Grade%2012/Challenge%202.%20Rotary%20Encoder%20Gray%20code/20180120_161906.jpg&quot; /&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;th&gt;Proper operation showing output 14&lt;/th&gt;
    &lt;th&gt;Bottom of rotary encoder&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;th colspan=&quot;2&quot;&gt;Link to YouTube Video: &lt;a href=&quot;https://youtu.be/K7AFz38Lux8&quot;&gt;https://youtu.be/K7AFz38Lux8&lt;/a&gt;&lt;/th&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;h2 id=&quot;code&quot;&gt;Code&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;; GrayCodeChallenge.asm
;
; Created: 2018-01-15 8:57:57 AM
; Author : Ethan McAuliffe
.def	iterate = r24
.def	temp  = r25
.def	three = r23
.def	threeTens = r22

.cseg

.org 0x0000
   rjmp  reset
;segment table format: ;gfab_cde.

.org 0x0010
grayStart:
  .DB	0,1,3,2,7,6,4,5,15,14,12,13,8,9,11,10
grayEnd:

reset:
	ldi   r16, low(RAMEND)		;ALL assembly code should start by
	out   spl,r16				      ; setting the Stack Pointer to
	ldi   r16, high(RAMEND)		; the end of SRAM to support
	out   sph,r16				      ; function calls, etc.
	ldi   xl,low(grayStart&amp;lt;&amp;lt;1)	;position X and Y pointers to the
	ldi   xh,high(grayStart&amp;lt;&amp;lt;1)	;start and end addresses of
	ldi   yl,low(grayEnd&amp;lt;&amp;lt;1)   ; our data table, respectively
	ldi   yh,high(grayEnd&amp;lt;&amp;lt;1)
	movw  z,x	                 ;start Z pointer off at the start address of the table.

	ldi r16,0x1E
	out DDRD,r16			
	ldi r16,0x07
	out DDRB,r16			;pins to control transistors
	ldi r16,0x0F
	out DDRC,r16			;pins to control 7-segment driver    

collect:
	clr r16
	clr r17
	clr r18
	in r16,PIND			;store input from rotary encoder
	lsr r16			    ;shift right to get gray code
	movw z,r16			;move to element the gray code is in binary
	add zl,xl
	lpm r18,z			;store fetched binary value

convert:
	mov r16,r18
	ldi iterate, 8
	ldi three, 0x03
	ldi threeTens, 0x30
	clr r17
	clr r18

loop:
   rol r16
   rol r17
   rol r18				;shift value and BCD registers with carry
   dec iterate			
   breq pov				;jump to POV if there are no bits left to convert

   mov temp, r17					
   andi temp, 0x0F					
   cpi temp, 0x05			
   brlo tens				;skip to tens if value is less than 5		
   add r17,three		;otherwise add three
tens:
   cpi temp, 0x50			
   brlo hundreds
   add r17,threeTens
hundreds:
   andi temp, 0x0F
   cpi temp, 0x50			
   brlo loop
   add r18, three
rjmp loop

pov:
	out PORTC,r18			;output hundreds value
	ldi r16,0x04
	out PORTB,r16			;enable hundreds 7-seg disp
	rcall delay
	lsr r16

	swap r17
	out PORTC,r17			;output tens value
	out PORTB,r16			;enable tens 7-seg disp
	rcall delay
	lsr r16

	swap r17
	out PORTC,r17			;output ones value
	out PORTB,r16			;enable ones 7-seg disp
	rcall delay
rjmp collect

delay:
; Generated by delay loop calculator
; at http://www.bretmulvey.com/avrdelay.html
;
; Delay 16 000 cycles
; 1ms at 16 MHz

    ldi  r19, 21
    ldi  r20, 199
L1: dec  r20
    brne L1
    dec  r19
    brne L1
ret
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;To conclude, I am satisfied with the final result of this project. Unfortunately, I was not able to have operational code by the end of the challenge period. After working on my program throughout the week, however, I was able to get a working solution. My initial code was organized properly, but not operational. This challenge has adequately tested my knowledge of assembly code. It has also helped me develop my understanding of Gray code and a broader understanding on conversion algorithms/techniques.&lt;/p&gt;
</description>
        <pubDate>Mon, 15 Jan 2018 00:00:00 -0500</pubDate>
      </item>
    
      <item>
        <title>Sample post</title>
        <link>/2014/11/30/sample-post.html</link>
        <guid isPermaLink="true">/2014/11/30/sample-post.html</guid>
        <description>&lt;p&gt;Consectetur adipiscing elit. Donec a diam lectus. Sed sit amet ipsum mauris. Maecenas congue ligula ac quam viverra nec consectetur ante hendrerit. Donec et mollis dolor. Praesent et diam eget libero egestas mattis sit amet vitae augue. Nam tincidunt congue enim, ut porta lorem lacinia consectetur. Donec ut libero sed arcu vehicula ultricies a non tortor. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean ut gravida lorem.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Consectetur adipiscing elit&lt;/li&gt;
  &lt;li&gt;Donec a diam lectus&lt;/li&gt;
  &lt;li&gt;Sed sit amet ipsum mauris&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ut turpis felis, pulvinar a semper sed, adipiscing id dolor. Pellentesque auctor nisi id magna consequat sagittis. Curabitur dapibus enim sit amet elit pharetra tincidunt feugiat nisl imperdiet. Ut convallis libero in urna ultrices accumsan. Donec sed odio eros. Donec viverra mi quis quam pulvinar at malesuada arcu rhoncus. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. In rutrum accumsan ultricies. Mauris vitae nisi at sem facilisis semper ac in est.&lt;/p&gt;

&lt;p&gt;Nunc diam velit, adipiscing ut tristique vitae, sagittis vel odio. Maecenas convallis ullamcorper ultricies. Curabitur ornare, ligula &lt;em&gt;semper consectetur sagittis&lt;/em&gt;, nisi diam iaculis velit, id fringilla sem nunc vel mi. Nam dictum, odio nec pretium volutpat, arcu ante placerat erat, non tristique elit urna et turpis. Quisque mi metus, ornare sit amet fermentum et, tincidunt et orci. Fusce eget orci a orci congue vestibulum.&lt;/p&gt;

&lt;p&gt;Ut dolor diam, elementum et vestibulum eu, porttitor vel elit. Curabitur venenatis pulvinar tellus gravida ornare. Sed et erat faucibus nunc euismod ultricies ut id justo. Nullam cursus suscipit nisi, et ultrices justo sodales nec. Fusce venenatis facilisis lectus ac semper. Aliquam at massa ipsum. Quisque bibendum purus convallis nulla ultrices ultricies. Nullam aliquam, mi eu aliquam tincidunt, purus velit laoreet tortor, viverra pretium nisi quam vitae mi. Fusce vel volutpat elit. Nam sagittis nisi dui.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Suspendisse lectus leo, consectetur in tempor sit amet, placerat quis neque&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Etiam luctus porttitor lorem, sed suscipit est rutrum non. Curabitur lobortis nisl a enim congue semper. Aenean commodo ultrices imperdiet. Vestibulum ut justo vel sapien venenatis tincidunt.&lt;/p&gt;

&lt;p&gt;Phasellus eget dolor sit amet ipsum dapibus condimentum vitae quis lectus. Aliquam ut massa in turpis dapibus convallis. Praesent elit lacus, vestibulum at malesuada et, ornare et est. Ut augue nunc, sodales ut euismod non, adipiscing vitae orci. Mauris ut placerat justo. Mauris in ultricies enim. Quisque nec est eleifend nulla ultrices egestas quis ut quam. Donec sollicitudin lectus a mauris pulvinar id aliquam urna cursus. Cras quis ligula sem, vel elementum mi. Phasellus non ullamcorper urna.&lt;/p&gt;
</description>
        <pubDate>Sun, 30 Nov 2014 00:00:00 -0500</pubDate>
      </item>
    
      <item>
        <title>Feature images</title>
        <link>/2014/11/29/feature-images.html</link>
        <guid isPermaLink="true">/2014/11/29/feature-images.html</guid>
        <description>&lt;p&gt;This is an example of a post which includes a feature image specified in the front matter of the post. The feature image spans the full-width of the page, and is shown with the title on permalink pages.&lt;/p&gt;
</description>
        <pubDate>Sat, 29 Nov 2014 00:00:00 -0500</pubDate>
      </item>
    
      <item>
        <title>Markdown and HTML</title>
        <link>/2014/11/28/markdown-and-html.html</link>
        <guid isPermaLink="true">/2014/11/28/markdown-and-html.html</guid>
        <description>&lt;p&gt;Jekyll supports the use of &lt;a href=&quot;http://daringfireball.net/projects/markdown/syntax&quot;&gt;Markdown&lt;/a&gt; with inline HTML tags which makes it easier to quickly write posts with Jekyll, without having to worry too much about text formatting. A sample of the formatting follows.&lt;/p&gt;

&lt;p&gt;Tables have also been extended from Markdown:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;First Header&lt;/th&gt;
      &lt;th&gt;Second Header&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Content Cell&lt;/td&gt;
      &lt;td&gt;Content Cell&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Content Cell&lt;/td&gt;
      &lt;td&gt;Content Cell&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Here’s an example of an image, which is included using Markdown:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/sample_feature_img_2.png&quot; alt=&quot;Geometric pattern with fading gradient&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Highlighting for code in Jekyll is done using Pygments or Rouge. This theme makes use of Rouge by default.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// count to ten&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// count to twenty&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Type Theme uses KaTeX to display maths. Equations such as &lt;script type=&quot;math/tex&quot;&gt;S_n = a \times \frac{1-r^n}{1-r}&lt;/script&gt; can be displayed inline.&lt;/p&gt;

&lt;p&gt;Alternatively, they can be shown on a new line:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;f(x) = \int \frac{2x^2+4x+6}{x-2}&lt;/script&gt;
</description>
        <pubDate>Fri, 28 Nov 2014 00:00:00 -0500</pubDate>
      </item>
    
  </channel>
</rss>
